generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider  = "postgres"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Plan {
  id                String  @id
  priceId           String  @unique 
  description       String
  users             User[]
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  password              String?
  phone                 String?                @unique
  cpf                   String?                @unique
  emailVerified         DateTime?
  image                 String?
  planId                String?
  customerId            String?                @unique
  accounts              Account[]
  sessions              Session[]
  userCollections       UserCollection[]
  items                 Item[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  plan                  Plan?                  @relation(fields: [planId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Collection {
  id          Int              @id
  description String           @unique
  collections UserCollection[]
  items       Item[]
}

model TypeModel {
  id          Int    @id
  description String @unique
  items       Item[]
}

model Item {
  id           String      @id
  model        String
  series       String?
  seriesNum    String?
  year         String
  status       Boolean     @default(true)
  image        String?
  createdAt    DateTime    @default(now()) @map("created_at")
  userId       String?
  typeModelId  Int
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  typeModel    TypeModel   @relation(fields: [typeModelId], references: [id])
  user         User?       @relation(fields: [userId], references: [id])
  itemImages   ItemImage[]
  userItem     UserItem[]
}

model ItemImage {
  id        String   @id @default(uuid())
  itemId    String
  fileName  String
  link      String
  principal Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  status    Boolean  @default(true)
  item      Item     @relation(fields: [itemId], references: [id],onDelete: Cascade)
}

model UserCollection {
  id               String           @id @default(uuid())
  description      String?
  name             String
  userId           String           @map(name: "user_id")
  collectionId     Int?
  createdAt        DateTime         @default(now()) @map(name: "created_at")
  status           Boolean          @default(true)
  fatherId         String?          @map(name: "father_id")
  user             User             @relation(fields: [userId], references: [id])
  collection       Collection?      @relation(fields: [collectionId], references: [id])
  parent           UserCollection?  @relation("ChildCollections", fields: [fatherId], references: [id])
  childCollections UserCollection[] @relation("ChildCollections")
  items            UserItem[]
}

model UserItem {
  createdAt        DateTime        @default(now()) @map(name: "created_at")
  description      String?
  scale            String?
  name             String?
  itemId           String
  userCollectionId String
  userCollection   UserCollection? @relation(fields: [userCollectionId], references: [id],onDelete: Cascade)
  item             Item?           @relation(fields: [itemId], references: [id])
  itemImages       UserItemImage[]

  @@id([itemId, userCollectionId])
}

model UserItemImage {
  id               String   @id @default(uuid())
  itemId           String
  userCollectionId String
  link             String
  fileName         String
  principal        Boolean  @default(false)
  createdAt        DateTime @default(now()) @map(name: "created_at")
  status           Boolean  @default(true)
  userItem         UserItem @relation(fields: [userCollectionId, itemId], references: [userCollectionId, itemId] ,onDelete: Cascade)
}


model LogStripeWebhook {
  id               String   @id @default(uuid())
  description      String?
  eventType        String?
  error            String?
  custumerId       String? 
  status           Boolean  @default(true)
  data             DateTime @default(now())
}
